syntax = "proto3";

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option csharp_namespace = "PerfRunner.V1";

package perf;

// Perf service definition.
service Perf {

    // Senda a ping response
    rpc Ping (PingRequest) returns (PingReply);

    // Run a test
    rpc RunTest (TestRequest) returns (TestReply);

    // Stops a test
    rpc StopTest (StopTestRequest) returns (StopTestReply);

    // Stop all test(s)
    rpc StopAllTests (StopAllTestsRequest) returns (StopAllTestsReply);

    // Update rate
    rpc UpdateRate (UpdateRateRequest) returns (UpdateRateReply);

    // Monitor test
    rpc MonitorTest (MonitorTestRequest) returns (stream TestRequest);

    // Running tests
    rpc RunningTests (RunningTestsRequest) returns (TestRequests);

    // Update action
    rpc UpdateAction (UpdateActionRequest) returns (UpdateActionReply);
}

// request with user id
message PingRequest {
    string name = 1;
}

//message ping reply
message PingReply {
    string message = 1;
}

// request with user id
message TestRequest {

    // guid of the test
    string guid = 1;
    
    // name of the test
    string name = 2;

    // rate at which the test should run per second
    int32 rate = 3;

    //list of actions
    repeated ActionOption actions = 4;
}

// actions
message ActionOption {

    // guid of the test
    string guid = 1;
    
    // name of the test
    string name = 2;

    // rate at which the test should run per second
    int32 rate = 3;

    // switch to check to run the action or not
    bool paused = 4;

    // duration for which the test should run
    google.protobuf.Duration duration = 6;

    // load distribution in a second, should it be even or not
    LoadDistribution LoadDistribution = 8;

}

enum LoadDistribution
{
    Even = 0;
    Uneven = 1;
}

enum ActionOptionUpdated
{
    Rate = 0;
    Paused = 1;
    Duration = 2;
    Distribution = 3;
}

//message ping reply
message TestReply {

    // status of test start
    bool status = 1;

    // message
    string message = 2;
}

// StopTest request
message StopTestRequest {

    // guid of the test
    string guid = 1;
}

// StopAllTests response
message StopTestReply {
    bool status = 1;
}

// StopAllTests request
message StopAllTestsRequest {
}

// StopAllTests response
message StopAllTestsReply {
    bool status = 1;
}

// UpdateRate request
message UpdateRateRequest {

    // guid of the test
    string guid = 1;

    // rate at which the test should run per second
    int32 rate = 2;
}

// UpdateRate response
message UpdateRateReply {
    bool status = 1;
}

// MonitorTest request
message MonitorTestRequest {

    // guid of the test
    string guid = 1;
}

// request with user id
message TestRequests {
    // list of test TestRequests
    repeated TestRequest tests = 1; 
}

// RunningTests request
message RunningTestsRequest {
}

// UpdateAction request
message UpdateActionRequest {

    // guid of this request
    string guid = 1;

    // guid of the test
    string testGuid = 2;

    // updated action option sent to be updated
    ActionOption actionOption = 3;

    // updated action option value sent to be updated
    ActionOptionUpdated actionOptionUpdate = 6;
}

// UpdateAction response
message UpdateActionReply {
    bool status = 1;
}