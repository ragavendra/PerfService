@page "/"
@using Grpc.Net.Client;
@using PerfRunner.V1;
@inject ILogger<Index> Logger

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to Perf Loader.

<SurveyPrompt Title="How is Blazor working for you?" />
<EditForm Model="@TestRequest">
    <InputText @bind-Value=TestRequest.Name></InputText>

    <InputNumber @bind-Value=TestRequest.Rate></InputNumber>

Actions: 
@foreach (var item in TestRequest.Actions)
{
    <br>
    <label>Name: @item.Name</label>
    <label>Rate: @item.Rate</label>
}
<br>
 <InputText @bind-Value=TestRequest.Actions.Last().Name></InputText>
 <InputNumber @bind-Value=TestRequest.Actions.Last().Rate></InputNumber>   
 <!-- InputNumber @bind-Value=item.Duration></InputNumber -->
 <button @onclick="() => TestRequest.Actions.Add(TestRequest.Actions.Last())">+</button>   
 <button @onclick="() => TestRequest.Actions.RemoveAt(TestRequest.Actions.Count - 1)">-</button>
 <button @onclick="() => StartTestAsync()">Start Test</button>

 <button @onclick="() => StopAllTestsAsync()">Stop All Tests</button>
</EditForm>

Running Tests:
@foreach (var item in RunningTests)
{
 <br>
 <label>@item</label>
 <button @onclick="() => StopTest(item)">Stop</button>
}

@code {

    private TestRequest TestRequest { get; set; }
    // Actions.Add(new ActionOption() { Name = "Login"}});

    private Perf.PerfClient PerfClient { get; set; }

    private IList<string> RunningTests { get; set; } = new List<string>();

    protected override void OnInitialized()
    {
        NewTest();
        
        /*
        actionOption = new ActionOption() { Name = "Login1",
        Rate = 1, Guid = Guid.NewGuid().ToString() };
        testRequest.Actions.Add(actionOption);*/
        var host_ = "http://localhost:5277";
        var channel = GrpcChannel.ForAddress(host_);
        PerfClient = new Perf.PerfClient(channel);
    }

    private void NewTest()
    {

        TestRequest = new TestRequest() { Name = "Test Name", Guid = Guid.NewGuid().ToString(), Rate = 3 };

        ActionOption actionOption = new ActionOption()
            {
                Name = "Login",
                Rate = 3,
                Guid = Guid.NewGuid().ToString()
            };
        TestRequest.Actions.Add(actionOption);

        actionOption = new ActionOption()
            {
                Name = "LoginHttp",
                Rate = 3,
                Guid = Guid.NewGuid().ToString()
            };
        TestRequest.Actions.Add(actionOption);

        actionOption = new ActionOption()
            {
                Name = "LoginGrpc",
                Rate = 3,
                Guid = Guid.NewGuid().ToString()
            };
        TestRequest.Actions.Add(actionOption);
    }

    private async void StartTestAsync()
    {
        Logger.LogInformation("Starting test " + TestRequest.Name);

        // not wait for task to complete
        var rep = PerfClient.RunTestAsync(TestRequest);
        RunningTests.Add(TestRequest.Guid);

        NewTest();
   }

    private void StopTest(string guid)
    {
        var rep = PerfClient.StopTestAsync(new StopTestRequest { Guid = guid });
        
        // StateHasChanged();
        RunningTests.Remove(guid);
    }

    private async void StopAllTestsAsync()
    {
        foreach (var item in RunningTests)
        {
            Logger.LogInformation("Stopping test " + item);

            // not wait for task to complete
            var rep = PerfClient.StopTestAsync(new StopTestRequest { Guid = item });
            // RunningTests.Remove(item);
        }

        RunningTests.Clear();
    }
}

